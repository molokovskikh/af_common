import System
import System.Diagnostics
import System.IO
import System.Text
import System.Net.Mail
import System.Linq.Enumerable from System.Core
import System.Globalization
import file from Config.bake


class GitStatus:
	public Branch as string
	public ChangesExists as bool
	public NeedPush as bool
	
	def constructor(status as string):
		status = status.Trim()
		ChangesExists = status.IndexOf("nothing to commit", StringComparison.OrdinalIgnoreCase) < 1
		NeedPush = status.IndexOf("Your branch is ahead of", StringComparison.OrdinalIgnoreCase) > 0
		branchString = "# On branch "
		branchStringLen = branchString.Length
		if status.StartsWith(branchString, StringComparison.OrdinalIgnoreCase):
			nextSeparator = status.IndexOfAny(" \r\n".ToCharArray(), branchStringLen)
			Branch = status.Substring(branchStringLen, nextSeparator - branchStringLen + 1).Trim() if nextSeparator > 0

	def IsBranchMaster() as bool:
		return Branch.Equals("master", StringComparison.OrdinalIgnoreCase)

	override def ToString() as string:
		return "Branch: ${Branch};  ChangesExists: ${ChangesExists};  NeedPush: ${NeedPush}"

def GetDeployTo(project as string):
	deployTo = Path.Combine(Globals.DeployRoot, project)

	if Globals.Maybe.DeployAlias:
		deployTo = Path.Combine(Globals.DeployRoot, Globals.DeployAlias)

	if Globals.Maybe.deployTo:
		deployTo = Globals.deployTo

	if Globals.Maybe.DeployTo:
		deployTo = Globals.DeployTo

	if not deployTo:
		raise """Не знаю куда разворачивать проект нужно задать либо Globals.DeployTo = '<путь куда выкладывать>' 
	либо название проекта Globals.Project тогда он будет выложен на Globals.DeployRoot по умолчанию это \\acdcserv.adc.analit.net\WebApps\"""
	return deployTo

if Environment.UserName != "kvasov":
        Globals.Editor = "notepad"
editor = Globals.Editor
humanReadableName = ""
if Globals.IsDefined(@humanReadableName):
	humanReadableName = Globals.humanReadableName
else:
	humanReadableName = Globals.HumanReadableName

project = ""
if Globals.IsDefined("Project"):
	project = Globals.Project
else:
	project = Globals.project

buildTo = Path.GetFullPath(Path.Combine(Globals.BuildRoot.ToString(), project))
deployTo = GetDeployTo(project)

def WriteMessages(file as string, message as string):
	reader = StringReader(message)
	using fileWriter = StreamWriter(file):
		fileWriter.WriteLine()
		fileWriter.WriteLine("# Напиши сообщение которое будет отправленно в рассылку.")
		fileWriter.WriteLine("# Строки помеченые знаком '#' будут игнорироваться.")
		fileWriter.WriteLine("#")
		while (line = reader.ReadLine()) != null:
			fileWriter.WriteLine("# " + line);

def GetLastMessagesFromGit():
	output = ""
	startInfo = ProcessStartInfo("git", "log -50",
								 RedirectStandardOutput : true,
								 StandardOutputEncoding  : Encoding.UTF8,
								 CreateNoWindow : true,
								 UseShellExecute : false)
	process = Process.Start(startInfo)
	process.OutputDataReceived += do(s, a):
		output += "\r\n" + a.Data
	process.BeginOutputReadLine()
	process.WaitForExit()
	return output

def DetectScm():
	return "git" if Exist(".git")
	print "Can not detect scm"
	return ""

def GetLastScmMessages():
	scm = DetectScm()
	if scm == "git":
		return GetLastMessagesFromGit()
	return ""

def StartEditor(editor as string, message as string):
	try:
		tempFile = Path.GetTempFileName()
		WriteMessages(tempFile, message)
		process = Process.Start(editor, tempFile)
		process.WaitForExit()
		messages = List[of string]()
		using reader = StreamReader(tempFile):
			while (line = reader.ReadLine()) != null:
				if line.Trim() and line.Trim()[0] == char('#'):
					continue
				messages.Add(line)
		return String.Join("\r\n", messages.ToArray())
	ensure:
		Rm(tempFile)

def GetGitStatus():
	output = ""
	startInfo = ProcessStartInfo("git", "status",
								 RedirectStandardOutput : true,
								 StandardOutputEncoding  : Encoding.UTF8,
								 CreateNoWindow : true,
								 UseShellExecute : false)
	process = Process.Start(startInfo)
	process.OutputDataReceived += do(s, a):
		output += "\r\n" + a.Data
	process.BeginOutputReadLine()
	process.WaitForExit()
	return output

backupRoot = """\\offdc\MMedia\AppBackUp\"""

def FindLastBackup():
	directories = Directory.GetDirectories(backupRoot)
	return directories\
		.Where({d| Path.GetFileName(d).StartsWith(project)})\
		.OrderByDescending({d| DateTime.ParseExact(d[d.IndexOf("-") + 1:], "yyyyMMddHHmmss", CultureInfo.CurrentCulture)})\
		.First()

task @SendDeployNotification:
	if Configuration.IsDefined("silent"):
		return

	messages = GetLastScmMessages()
	deployMessage = StartEditor(editor, messages)

	if not deployMessage.Trim():
		print "Нужно написать сообщение которое будет отправлено в рассылку или запустить с параметрами -o:silent=true"
		return

	smtp = SmtpClient("mail.adc.analit.net")
	smtp.Send("tech@analit.net",
		"UpdatesList@subscribe.analit.net",
		"Обновление ${humanReadableName}",
		"Релиз подготовил ${Environment.UserName}\r\n${deployMessage}")

task @Backup:
	deployTo = GetDeployTo(project)
	backupName = "${project}-${DateTime.Now.ToString('yyyyMMddHHmmss')}"
	backup = Path.Combine(backupRoot, backupName)
	MkDir(backup)
	Cp(FileSet("**/*.*", Excludes : ["*.log","request/*.*","responce/*.*","IdxDir/*.*"], BaseDirectory : deployTo), backup)
	print "backuped to ${backup}"

task @RollbackDeploy, [@WebClean]:
	backup = FindLastBackup()
	Cp(FileSet("**/*.*", Excludes : ["*.log"], BaseDirectory : backup), deployTo)
	backupDate = DateTime.ParseExact(backup[backup.IndexOf("-") + 1:], "yyyyMMddHHmmss", CultureInfo.CurrentCulture)
	print "rollback to $project at $backupDate"
	Rm(backup, true)

task @WebDeploy, [@WebClean]:
	deployTo = GetDeployTo(Globals.Project.ToString())
	buildTo = Path.GetFullPath(Path.Combine(Globals.BuildRoot.ToString(), Globals.Project))

	files = FileSet("**/*.*", BaseDirectory : buildTo)
	Cp(files, deployTo, true)
	print "${files.Files.Count} files deployed to $deployTo"

task @WebClean:
	deployTo = GetDeployTo(Globals.Project.ToString())
	Rm(FileSet("**/*.*", Excludes : ["*.log"], BaseDirectory : deployTo))

task @CheckScmChanges:
	if DetectScm() == "git":
		gitStatus = GitStatus(GetGitStatus())
		raise "В репозитории имеются неподтвержденные изменения. Надо произвести Commit и потом выполнить deploy." if gitStatus.ChangesExists
		raise "Текущая ветка ${gitStatus.Branch} не является master-веткой. Надо переключиться в ветку master и потом выполнить deploy." if not gitStatus.IsBranchMaster()
		raise "В текущей ветки есть изменения, не сохраненные в удаленном репозитории. Надо сделать push и потом выполнить deploy." if gitStatus.NeedPush
