import System
import System.Diagnostics
import System.IO
import System.Text
import System.Net
import System.Net.Mail
import System.Xml.Linq
import System.Xml.XPath.Extensions
import System.Linq.Enumerable from System.Core
import System.Globalization
import System.Text.RegularExpressions


def FindLastBackup(project as string, backupRoot as string):
	directories = Directory.GetDirectories(backupRoot)
	return directories\
		.Where({d| Path.GetFileName(d).StartsWith(project)})\
		.OrderByDescending({d| DateTime.ParseExact(d[d.IndexOf("-") + 1:], "yyyyMMddHHmmss", CultureInfo.CurrentCulture)})\
		.First()

unless Engine.Tasks.Any({t| t.Name == "DeployApp"}):
	task @DeployApp, [@WebDeploy]

task "build:stub":
	if Engine.Tasks.Any({t| t.Name == "Build"}):
		Engine.Execute("Build")
	else:
		Engine.Execute("build")

task "deploy:stub":
	if Engine.Tasks.Any({t| t.Name == "deploy:app"}):
		Engine.Execute("deploy:app")
	else:
		Engine.Execute("DeployApp")

task "deploy:pipeline", ["env", "packages:install", "check", "version:bump", "build:stub", @Backup, "db:migrate", "deploy:stub", "deploy:notify"]

desc """
отправляет уведомление о развертывание проекта
на UpdatesList@subscribe.analit.net
notifyTo - удрес на который отправлять уведомление вместо стандартного
"""
task "deploy:notify":
	return if Globals.Environment == @Test

	project, _, _ = GetBuildConfig(Globals)
	humanReadableName = Globals.Maybe.humanReadableName or Globals.Maybe.HumanReadableName
	to = Configuration.Maybe.notifyTo or "UpdatesList@subscribe.analit.net"

	deployRecord = Db.Read("select GitHash from Logs.Deploys where Project = '$project' order by DeployedOn  desc limit 1").FirstOrDefault()
	if deployRecord:
		lastDeployHash = deployRecord.GitHash
	head = GetGitHead(null)
	if lastDeployHash:
		logs = GetGit("log --no-merges $lastDeployHash..")
	user = Environment.UserName
	smtp = SmtpClient("box.analit.net")
	Db.Execute("insert into logs.Deploys(User, DeployedOn, GitHash, Project) values('$user', now(), '$head', '$project')")
	jenkinsStatus = Globals.Maybe.JenkinsStatus
	smtp.Send("r.kvasov@analit.net",
		to,
		"Обновление ${humanReadableName}",
		"Релиз подготовил $user\nРевизия $head\n$jenkinsStatus\n$logs")

def GetBackupPath():
	#Если мы разворачиваем сервис то будет опеределена переменная Server
	project, _, _ = GetBuildConfig(Globals)
	if Globals.Maybe.Server:
		servers = GetServersToDeploy(Globals)
		rootServer = servers.First()
		deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	else:
		deployTo = GetDeploy(Globals)
	return deployTo

	return if Globals.Environment == @Test or Configuration.Maybe.Simulate

task "deploy:backup":
	project, _, _ = GetBuildConfig(Globals)
	deployTo = GetBackupPath()

	backupName = "${project}-${DateTime.Now.ToString('yyyyMMddHHmmss')}"
	backupRoot = Globals.Maybe.BackupRoot
	backup = Path.Combine(backupRoot, backupName)
	MkDir(backup)
	Cp(FileSet("**/*.*", Excludes : ["*.log", "logs", "request","responce","IdxDir/*.*"], BaseDirectory : deployTo), backup)
	print "backuped to ${backup}"

task @RollbackDeploy, [@WebClean]:
	project, _, _ = GetBuildConfig(Globals)
	deployTo = GetBackupPath()

	backupRoot = Globals.Maybe.BackupRoot
	backup = FindLastBackup(project, backupRoot)
	Cp(FileSet("**/*.*", Excludes : ["*.log"], BaseDirectory : backup), deployTo)
	backupDate = DateTime.ParseExact(backup[backup.IndexOf("-") + 1:], "yyyyMMddHHmmss", CultureInfo.CurrentCulture)
	print "rollback to $project at $backupDate"
	Rm(backup, true)

task @WebDeploy, [@WebClean]:
	XCopyDeploy(Globals)

task @CopyTiny:
	deployTo = GetDeploy(Globals, Globals.Project.ToString())
	files = FileSet("**/*.*", Excludes : [], BaseDirectory : "packages/TinyMCE.3.4.5/content/Scripts/")
	Cp(files, deployTo + "/Assets/Javascripts/", true)

task @WebClean:
	CleanDeployDir(Globals, Globals.Project.ToString())
