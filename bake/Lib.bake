import System
import System.IO
import System.Xml.Linq
import System.Diagnostics
import System.Xml.XPath.Extensions
import System.Xml.Serialization from System.XML
import System.Linq.Enumerable from System.Core
import System.Collections.Generic
import NuGet from NuGet.Core
import NuGet.PackageRepositoryExtensions from NuGet.Core

class AssemblyResolver(BaseAssemblyResolver):
	lookup as ILookup[of string, AssemblyDefinition]

	def constructor(cache as ILookup[of string, AssemblyDefinition]):
		lookup = cache

	override def Resolve(name as AssemblyNameReference):
		return lookup[name.Name].FirstOrDefault() or super(name)

class Hint:
	public Id as string
	public Version as IVersionSpec
	public Action as string
	public Target as string

	def constructor():
		pass

	def constructor(id as string, version as string, action as string, target as string):
		Id = id
		Version = VersionUtility.ParseVersionSpec(version)
		Action = action
		Target = target

	def Match(package as IPackage):
		return Id == package.Id and Version.Satisfies(package.Version)

	def Apply(package as IPackage, update as IPackage, manager as PackageManager):
		if Match(package):
			if Action == "d":
				print "hint hit for $Id $Version uninstall $Target"
				try:
					manager.UninstallPackage(Target)
				except e as InvalidOperationException:
					#игнорируем ошибки если пакет не установлен
					print e
			if Action == "i":
				print "hint hit for $Id $Version install $Target"
				manager.InstallPackage(Target)
			if Action == "x":
				print "hint hit for $Id $Version execute $Target"
				Bash("${Target} ${package.Id} ${package.Version} ${update.Version}")
			if Action == "s":
				print "hint hit for $Id $Version skip"
				return false
		return true

	static def TryParse(line as string):
		return null if line.StartsWith("#")
		parts = line.Split((char(' '), ), StringSplitOptions.RemoveEmptyEntries)
		if parts.Length != 4:
			return null
		return Hint(Id: parts[0], Version: VersionUtility.ParseVersionSpec(parts[1]), Action: parts[2], Target: parts[3])

	static def GetHints(globals as DuckDictionary):
		hints = List[of Hint]()
		hintsfile = GetResource(@nugethints)
		unparsedHints = ReadGlobalConfig(globals, "packages:update", @hints) or (of string:,)
		if Exist(hintsfile):
			unparsedHints = File.ReadAllLines(hintsfile).Concat(unparsedHints).ToArray()
		if Exist("nugethints"):
			unparsedHints = File.ReadAllLines("nugethints").Concat(unparsedHints).ToArray()
		for line in unparsedHints:
			hint = Hint.TryParse(line)
			continue unless hint
			hints.Add(hint)
		print "loaded ${hints.Count} hints"
		return hints

	override def ToString():
		return "$Id $Version $Action $Target"

	static def GetConstrain(hints as Hint*, package as IPackage):
		constraints = hints.Where({h| h.Match(package) and h.Action == "c"})\
			.Select({h| VersionUtility.ParseVersionSpec(h.Target)})\
			.ToArray()
		if constraints.Length > 1:
			max = constraints.Select({c| c.MaxVersion}).Min()
			return constraints.First({c| c.MaxVersion == max})
		return constraints.FirstOrDefault()

def CheckHints(hints as Hint*, package as IPackage, update as IPackage, manager as PackageManager):
	for hint in hints:
		return false unless hint.Apply(package, update, manager)
	return true

class Package:
	property Name as string
	property Version as string
	property Dir as string

	def constructor():
		pass

	def constructor(name as string, version as string):
		Name = name
		Version = version

	def constructor(path as string):
		a = ParseFromPackageName(path).Split(char('/'))
		Name = a[0]
		Version = a[1]
		Dir = path

	override def Equals(obj):
		return false unless obj isa Package
		package = cast(Package, obj)
		return String.Equals(Name, package.Name, StringComparison.InvariantCultureIgnoreCase)\
			and String.Equals(Version, package.Version, StringComparison.InvariantCultureIgnoreCase)

	override def GetHashCode():
		return (Name.ToLower() + Version.ToLower()).GetHashCode()

	override def ToString():
		return "$Name $Version"

	static def ParseFromPackageName(dir as string):
		name = Path.GetFileName(dir)
		match = /(\.\d+){2,4}(-\w+)?$/.Match(name)
		return null unless match.Success
		return /(\.\d+){2,4}(-\w+)?$/.Replace(name, /^\./.Replace(match.Value, "/"))

libRoot = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "../lib/")

def IsValidPath(path as string, libPath as string):
	return true if path.IndexOf("\\packages\\") < 0
	return false if path.IndexOf("LibPath") >= 0
	return Exist(path.Replace('$(PackagePath)', libPath))

def CheckPlatformSpecificVersion(path as string, max as string):
	aliases = {
		"net45" : ("net45", ),
		"net40" : ("net40-full", "net-4.0", "net4", "net40", "NET40ClientProfile", "net40-client"),
		"net20" : ("net35", "20", "2.0", "2", "net20", "net"),
	}

	preferedVersions = List[of string]()
	for alias in aliases:
		if alias.Key == max:
			found = true
		if found:
			preferedVersions.AddRange(alias.Value)

	specificVersion = preferedVersions.Select({v| Path.Combine(path, v)}).FirstOrDefault({d| Directory.Exists(d)})
	if specificVersion:
		return specificVersion
	else:
		return path

def GetLibPath(dir as string):
	subdirs = Directory.GetDirectories(dir)
	return dir if subdirs.Length == 0 or subdirs.Length > 1
	version as Version
	return subdirs[0] if version.TryParse(Path.GetFileName(subdirs[0]), version)
	return dir

def NugetInstall(config as string):
	print config if Configuration.Maybe.debug
	if Exist(config):
		Exec("nuget", "install $config -OutputDirectory packages").Execute()

def GetSlnPackageConfigs():
	return GetProjects().Select({p| Path.Combine(Path.GetDirectoryName(p), "packages.config")})\
		.Where({c| Exist(c)})\
		.ToArray()

def GetPackageConfigs():
	return GetSlnPackageConfigs()\
		.Concat(("packages/packages.config", ))\
		.Where({c| Exist(c)})\
		.ToArray()

def GetInstalledPackages():
	return Directory.GetDirectories(@packages).Select({d| Package(d)}).ToArray()

def GetPackagesForConfig(config as string):
	unless Exist(config):
		return Enumerable.Empty[of Package]().ToArray()
	return XDocument.Load(config).Descendants().Where({n| n.Name == @package})\
		.Select({n| Package(n.Attribute(@id).Value, n.Attribute(@version).Value)}).ToArray()

def GetPackages():
	return GetPackageConfigs().SelectMany({c| GetPackagesForConfig(c)}).ToArray()

def GetLibPaths():
	targetFramework = DetectTargetFramework(Globals)
	packages = Directory.GetDirectories(@packages).Select({d| Path.Combine(d, @lib)}).Where({d| Exist(d)})\
		.Select({d| CheckPlatformSpecificVersion(d, targetFramework)})\
		.Select({d| '$(PackagePath)\\' + d})
	if Exist(@lib):
		packages = packages.Concat(('$(LibPath)\\lib', ))
		libs = Directory.GetDirectories(@lib).Where({d| not Exist(Path.Combine(d, @src))})\
			.Select({d| GetLibPath(d)})\
			.Select({d| '$(LibPath)\\' + d})
		packages = packages.Concat(libs)

	return String.Join(";", packages.ToArray())

def GetProjects():
	return FileSet("src/**/*.*proj").Concat(FileSet("test/**/*.*proj")).Concat(FileSet("lib/**/*.csproj"))

def SavePropfile(projectfile as string, libPaths as string, packages as Package*):
	projectRoot = Path.GetDirectoryName(projectfile)
	filename = Path.Combine(projectRoot, "msbuild.gen.props")
	rootPath = Path.GetDirectoryName(CalculateRelativePath(projectRoot, Path.GetFullPath(".")))
	names = packages.Select({p| p.Name}).ToArray()
	consts = String.Join(";", names.Select({n| n.Replace(".", "_").Replace("-", "_")}))
	dir = Directory.GetDirectories(@packages)\
		.Select({d| Path.GetFileName(d)})\
		.FirstOrDefault({d| d.StartsWith("StyleCop.MSBuild.")})
	stylecopPath = "\$(PackagePath)\\packages\\$dir"
	dir = Directory.GetDirectories(@packages)\
		.Select({d| Path.GetFileName(d)})\
		.FirstOrDefault({d| d.StartsWith("StyleCopAddOn.")})
	stylecopAddonPath = "\$(PackagePath)\\packages\\$dir"

	xmlNamespace = XNamespace.Get("http://schemas.microsoft.com/developer/msbuild/2003")
	node = XElement(xmlNamespace + @PropertyGroup,\
			XElement(xmlNamespace + @LibPath, rootPath),\
			XElement(xmlNamespace + @PackagePath, rootPath),\
			XElement(xmlNamespace + @ReferencePath, libPaths),\
			XElement(xmlNamespace + @DefineConstants, consts),\
			XElement(xmlNamespace + @StyleCopPath, stylecopPath),\
			XElement(xmlNamespace + @StylecopAddonPath, stylecopAddonPath)\
	)
	document = XDocument(XElement(xmlNamespace + @Project, node))
	for package in packages:
		nodeName = "Lib_" + package.Name.Replace(".", "_").Replace("-", "_")
		nodeValue = "[System.Version]::Parse(\"${package.Version}\")"
		node.Add(XElement(xmlNamespace + nodeName, nodeValue))
	document.Save(filename)

desc """
импортирует библиотки из packages в файлы проектов
"""
task @packages, ["packages:init", "packages:install"]:
	return unless Exist(@packages)

	libPaths = GetLibPaths()
	for file in GetProjects():
		document = XDocument.Load(file)
		projectNode = document.Elements().First()
		toDelete = projectNode.Elements().Where({e| e.Name.LocalName == @Import and\
			((e.Attribute(@Project).Value or "").ToLower().EndsWith("lib.properties")\
			or (e.Attribute(@Project).Value or "").ToLower().EndsWith("projectlib.properties")\
			or (e.Attribute(@Project).Value or "").ToLower().EndsWith("srclib.properties")\
			or (e.Attribute(@Project).Value or "").ToLower().EndsWith("msbuild.gen.prop"))\
		}).ToArray()
		for el in toDelete:
			el.Remove()
		if toDelete.Length:
			document.Save(file)

		importPath = "msbuild.gen.props"
		SavePropfile(file, libPaths, GetPackages())

		importNode = projectNode.Elements().FirstOrDefault({e| e.Name.LocalName == @Import and\
			e.Attribute(@Project).Value == importPath})
		unless importNode:
			importNode = XElement(projectNode.Name.Namespace + @Import,\
				XAttribute(@Project, importPath),\
				XAttribute(@Condition, "Exists('$importPath')"))
			projectNode.AddFirst(importNode)
			document.Save(file)

desc """
создает файл конфигурации nuget, вызывается автоматически
"""
task "packages:init":
	if not Exist("src/nuget.config"):
		File.WriteAllText("src/nuget.config", "<settings>\r\n\t<repositoryPath>..\\packages\\</repositoryPath>\r\n</settings>")

desc """
сохраняет все установленные пакеты в packages/packages.config
"""
task "packages:save":
	libPackages = GetSlnPackageConfigs().SelectMany({c| GetPackagesForConfig(c)}).ToArray()
	doc = XDocument()
	root = XElement(@packages)
	doc.Add(root)
	for package in GetInstalledPackages().Except(libPackages):
		packageElement = XElement(@package, XAttribute(@id, package.Name), XAttribute(@version, package.Version))
		root.Add(packageElement)
	doc.Save("packages/packages.config")

desc """
очищает директорию packages от пакетов которые не указаны в packages.config
"""
task "packages:clean":
	packages = GetPackages()
	installedPackages = GetInstalledPackages()
	toDelete = installedPackages.Except(packages)
	for package in toDelete:
		print "remove ${package.Dir}"
		#в директории похоже сидит студия, делаям несколько подходов
		RepeatTry:
			RmDir(package.Dir, true)

desc """
устанавливает пакеты описаные в packages.config
параметры:
targetFramework - версия framework под которую будут загружаться библиотеки
если не задана используется Globals.TargetFramework
настройки из Globals будут переопределены настройкой в файле проекта
заданного с помощью Globals.Project
"""
task "packages:install", ["packages:clean"]:
	configs = GetPackageConfigs()
	var nugetPackages = List[of Package]()
	for config in configs:
		NugetInstall(config)
		nugetPackages.AddRange(GetPackagesForConfig(config))

	paths = GetLibPaths()
	for file in GetProjects():
		if XDocument.Load(file).Descendants().Where({n| n.Name.LocalName == @Import}).Any({n| n.Attribute(@Project) != null and n.Attribute(@Project).Value.IndexOf("msbuild.gen.props") >= 0}):
			SavePropfile(file, paths, nugetPackages)

desc """
обновляет пакеты из packages.config
"""
task "packages:update":
	hints = Hint.GetHints(Globals)
	root = Path.GetFullPath("packages")
	fs = PhysicalFileSystem(root)
	settings = Settings.LoadDefaultSettings(fs, null, null)
	source = PackageSource("https://www.nuget.org/api/v2/")
	sources = (source,)
	sourceProvider = PackageSourceProvider(settings, sources)
	factory = PackageRepositoryFactory.Default
	rep = AggregateRepository(factory, sourceProvider.GetEnabledPackageSources().Select({s| s.Source}), true)
	sourceRep = rep

	pathResolver = DefaultPackagePathResolver(fs)
	localRepository = SharedPackageRepository(pathResolver, fs, fs, fs)
	packages = localRepository.GetPackages().ToList()
	packageSorter = PackageSorter(null)
	packages = packageSorter.GetPackagesByDependencyOrder(localRepository).ToList()
	c as IPackageConstraintProvider = NullConstraintProvider.Instance
	packageManager = PackageManager(sourceRep, pathResolver, fs, localRepository)
	reffiles = GetSlnPackageConfigs().Select({f| PackageReferenceRepository(PhysicalFileSystem(Path.GetDirectoryName(f)), "", localRepository)}).ToArray()
	for package in packages:
		print package
		versionConstraint = Hint.GetConstrain(hints, package)
		updated as IPackage = PackageRepositoryExtensions.FindPackage(rep, package.Id, versionConstraint, c, false, false)
		continue unless updated
		continue if package.Version >= updated.Version
		continue unless CheckHints(hints, package, updated, packageManager)
		try:
			packageManager.UpdatePackage(package.Id, versionConstraint, true, false)
			for reffile in reffiles:
				if reffile.Exists(package.Id, package.Version):
					reffile.RemovePackage(package)
					reffile.AddPackage(updated)

			print "$package => $updated"
		except e as InvalidOperationException:
			print e.Message

def RemoveStrongName(assembly as AssemblyDefinition):
	module = assembly.MainModule
	assemblyName = assembly.Name

	return false unless assemblyName.HasPublicKey
	assemblyName.HasPublicKey = false
	assemblyName.PublicKey = (of byte:,)
	module.Attributes &= ~ModuleAttributes.StrongNameSigned
	return true

def TryLoad(f as string):
	try:
		return AssemblyDefinition.ReadAssembly(f)
	except:
		return null

def FixWindsor(assembly as AssemblyDefinition):
	attr = assembly.CustomAttributes.FirstOrDefault({a| a.AttributeType.Name == "PreApplicationStartMethodAttribute"})
	if attr:
		assembly.CustomAttributes.Remove(attr)

def GetPatches(assembly as AssemblyDefinition) as (Action[of AssemblyDefinition]):
	if assembly.Name.Name == "Castle.Windsor":
		return (FixWindsor,)
	return (,)

def IsFixInternal(assembly as AssemblyDefinition):
	return assembly.CustomAttributes.Any({a| a.AttributeType.Name == "InternalsVisibleToAttribute"})

desc """
для обратной совместимости, используй packages:fix
"""
task "fix:packages", ["packages:fix"]

desc """
правит ссылки на сборки внутри пакетов приводя их все к одному виду
что не нужно было генерировать binding redirection
которые все равно не работают
тк msbuild проверяет номер версии когда копирует коственные зависимости
парамерты
root - путь к пакетам
Retarget - при установки опции ссылки на сборку System.Core из portable library
правятся на .net 4 это нужно тк .net 4 что бы обойти ошибку в .net
что бы не ставить пакет исправлений KB2468871
"""
task "packages:fix":
	verbose = Configuration.Maybe.verbose
	excludes = ("Xceed.Wpf.Toolkit", "Mono.Cecil", "Mono.Cecil.Mdb", "Mono.Cecil.Pdb", "Mono.Cecil.Rocks",\
		"StyleCop", "StyleCop.CSharp", "StyleCop.CSharp.Rules")
	root = Configuration.Maybe.root or "packages"
	files = FileSet("$root/**/*.dll")
	isNet45 = DetectTargetFramework(Globals) == "net45"
	assemblyNames = files.Select({f| TryLoad(f)}).Where({a| a != null}).ToLookup({a| a.Name.Name})
	for file in files:
		try:
			print "inspect $file" if verbose
			parameters = ReaderParameters()
			parameters.AssemblyResolver = AssemblyResolver(assemblyNames)
			assembly = AssemblyDefinition.ReadAssembly(file, parameters)
			if excludes.Contains(assembly.Name.Name):
				print "skip ${assembly.Name.Name}" if verbose
				continue
			patches = GetPatches(assembly)
			for patch in patches:
				patch(assembly)
			if RemoveStrongName(assembly):
				if IsFixInternal(assembly):
					print "fix internal" if verbose
					attrs = assembly.CustomAttributes.Where({a| a.AttributeType.Name == "InternalsVisibleToAttribute"}).ToArray()
					for attr in attrs:
						arg = attr.ConstructorArguments[0]
						val = arg.Value
						refAssembly = val.Split(char(','))[0]
						if assemblyNames.Contains(refAssembly):
							val = refAssembly
							attr.ConstructorArguments.Remove(arg)
							attr.ConstructorArguments.Add(CustomAttributeArgument(arg.Type, val))
			for reference in assembly.MainModule.AssemblyReferences:
				version as Version
				if isNet45:
					#в 4.5 сборка стала частью .net хотя формально она исправлена править ссылку
					#на нее не следует тк при сборке будет предпочитаться ссылка из .net
					if reference.Name == "System.Net.Http":
						continue
				if assemblyNames.Contains(reference.Name):
					version = assemblyNames[reference.Name].First().Name.Version
				elif Globals.Maybe.Retarget and reference.Name == "System.Core" and reference.Version.ToString() == "2.0.5.0":
					reference.Version = Version(4, 0, 0, 0)
					reference.PublicKeyToken = (of byte: 0xb7, 0x7a, 0x5c, 0x56, 0x19, 0x34, 0xe0, 0x89)
					reference.IsRetargetable = false
				continue unless version
				reference.HasPublicKey = false
				reference.PublicKey = (of byte:,)
				reference.Version = version
				print "fix ref $reference" if verbose
			try:
				assembly.MainModule.ReadSymbols()
			except e:
				pass
			assembly.Write(file, WriterParameters(WriteSymbols: true))
		except e as NotSupportedException:
			if verbose:
				print file
				print e
		except e as AssemblyResolutionException:
			if verbose:
				print file
				print e
		except e as BadImageFormatException:
			if verbose:
				print file
				print e
		except e:
			print file
			print e

task "assembly:remove:strongname":
	name = Configuration.name.ToString()
	assembly = AssemblyDefinition.ReadAssembly(name)
	RemoveStrongName(assembly)
	assembly.Write(name)
