import System
import System.Net
import System.Globalization
import System.Diagnostics
import System.Collections.Generic
import System.Linq.Enumerable
import System.Xml.Linq
import System.Xml.XPath.Extensions from System.Xml.Linq
import System.IO
import System.Net.Mail
import Mono.Cecil

class Project:
	_project as string
	_projectFile as string
	_isX86 as bool
	_frameworkVersion as string
	_targetFramework as string

	property BuildOutput as string
	property TestOutput as string

	def constructor(projectFile as string, isX86 as bool, frameworkVersion as string, targetFramework as string):
		_projectFile = projectFile
		_project = Path.GetFileNameWithoutExtension(projectFile)
		_isX86 = isX86
		_frameworkVersion = frameworkVersion
		_targetFramework = targetFramework

	def Build():
		conf = "debug"
		if _targetFramework == "net45":
			conf = "debug-net45"
		clean = MsBuild(_projectFile,
			Target : "clean",
			Parameters : { "Configuration" : conf },
			FrameworkVersion : _frameworkVersion)
		clean.Arguments.Add("/verbosity:minimal")

		build = MsBuild(_projectFile,
			Target : "build",
			Parameters : { "Configuration" : conf },
			FrameworkVersion : _frameworkVersion)
		build.Arguments.Add("/verbosity:minimal")
		clean.Execute()
		build.Execute()

		BuildOutput = clean.Output.ToString() + "\r\n" + build.Output.ToString()

	def Test():
		assembly = Path.Combine(Path.GetDirectoryName(_projectFile), "bin/debug/${_project}.dll")
		print "test $assembly"
		assemblyDefinition = AssemblyDefinition.ReadAssembly(assembly)
		_isX86 = assemblyDefinition.MainModule.Architecture == TargetArchitecture.I386

		nunitPath = "nunit-console"
		if _isX86:
			nunitPath = "nunit-console-x86"
		nunit = NUnit("\"" + assembly + "\"",
			ExecutablePath : nunitPath)

		nunit.Execute()

		TestOutput = nunit.Output.ToString()

	def ToString():
		return _project

def GetProjects():
	frameworkVersion = Globals.FrameworkVersion
	isx86 = Globals.Maybe.platform == "x86" or Globals.Maybe.Platform == "x86"
	return GetProjectsForTest().Select({f| Project(f, isx86, frameworkVersion, Globals.TargetFramework)}).ToList()

task @integration, [@test]

task @test, [@RunTests]

task @PrepareBuild, ["check:common:error", "packages:install"]:
	if Exist("build/version.txt"):
		Engine.Execute("GenerateAssemblyInfo")

task @BuildTests, [@PrepareBuild]:
	projects = GetProjects()
	for project in projects:
		project.Build()

task @TestJs:
	return unless Exist("test")
	if Exist("Gruntfile.js"):
		Sh("grunt")
		return

	root = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "../tools/phantomjs-1.2.0")
	root = Path.GetFullPath(root)
	phantom = "phantomjs"
	run = Path.Combine(root, "examples", "run-qunit.js")
	for file in Directory.GetFiles("test", "*.html"):
		Sh("$phantom $run $file")

task @RunTests, [@TestJs, @BuildTests]:
	index = 0

	ignore = (of Regex: ,)
	if Globals.Maybe.TestIgnore:
		ignore = ignore.Concat(Globals.Maybe.TestIgnore).ToArray()

	for project in GetProjects():
		continue if ignore.Any({i| i.IsMatch(project.ToString())})
		index++
		if Exist("TestResult.xml"):
			Cp("TestResult.xml", "TestResult.$project.$index.xml", true)
		project.Test()

#перед запуском тестов нам нужно собрать проект, тк в проекте могут быть
#boo миграции которые используют классы из проекта
task @TryToBuild, [@PrepareBuild, @TryBeforeTest]:
	projectFile = FileSet("src/*.sln").Files.First()
	MsBuild(projectFile, "/verbosity:quiet",
			Target: "build",
			FrameworkVersion: Globals.FrameworkVersion).Execute()

task @TryBeforeTest:
	if Engine.Tasks.FirstOrDefault({t| t.Name == @BeforeTest}):
		Engine.Execute(@BeforeTest)
