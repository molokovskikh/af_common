import System
import System.Net
import System.Globalization
import System.Diagnostics
import System.Collections.Generic
import System.Linq.Enumerable
import System.Xml.Linq
import System.Xml.XPath.Extensions from System.Xml.Linq
import System.IO
import System.Net.Mail
import Mono.Cecil
import FubuCsProjFile

class Project:
	_project as string
	public _projectFile as string
	_frameworkVersion as string
	_targetFramework as string
	exe as string

	property BuildOutput as string
	property TestOutput as string

	def constructor(projectFile as string, frameworkVersion as string, exe as string, targetFramework as string):
		_projectFile = projectFile
		_project = Path.GetFileNameWithoutExtension(projectFile)
		_frameworkVersion = frameworkVersion
		_targetFramework = targetFramework
		self.exe = exe

	def Test():
		assembly = Path.Combine(Path.GetDirectoryName(_projectFile), "bin/debug/${_project}.dll")
		unless Exist(assembly):
			name = CsProjFile.LoadFrom(_projectFile).AssemblyName
			assembly = Path.Combine(Path.GetDirectoryName(_projectFile), "bin/debug/$name.dll")
		print "test $assembly"
		assemblyDefinition = AssemblyDefinition.ReadAssembly(assembly)
		isX86 = assemblyDefinition.MainModule.Architecture == TargetArchitecture.I386

		nunitPath = "nunit-console"
		if isX86:
			nunitPath = "nunit-console-x86"
		nunit = NUnit("\"" + assembly + "\"",
			ExecutablePath : nunitPath)
		nunit.Arguments.Add("/labels")

		nunit.Execute()

		TestOutput = nunit.Output.ToString()

	def ToString():
		return _project

def GetProjects():
	msbuildVersion = Globals.FrameworkVersion
	frameworkVersion = DetectTargetFramework(Globals)
	projects = GetProjectsForTest().Select({f| Project(f, msbuildVersion, Globals.Maybe.MsbuildExe, frameworkVersion)}).ToList()

	ignore = (of Regex: ,)
	if Globals.Maybe.TestIgnore:
		ignore = ignore.Concat(Globals.Maybe.TestIgnore).ToArray()

	return projects.Where({x| not ignore.Any({i| i.IsMatch(x.ToString())})}).ToList()

task @integration, [@test]

task @test, [@RunTests]

task @PrepareBuild, ["generate:assembly:info", "check:common:error", "packages:install"]

task @BuildTests, [@PrepareBuild]:
	for project in GetProjects():
		BuildCore(Globals, project._projectFile, {})

task @TestJs:
	return unless Exist("test")
	if Exist("Gruntfile.js"):
		Sh("grunt")
		return

	root = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "../tools/phantomjs-1.2.0")
	root = Path.GetFullPath(root)
	phantom = "phantomjs"
	run = Path.Combine(root, "examples", "run-qunit.js")
	for file in Directory.GetFiles("test", "*.html"):
		Sh("$phantom $run $file")

task @RunTests, [@TestJs, @BuildTests]:
	index = 0
	for project in GetProjects():
		index++
		if Exist("TestResult.xml"):
			Cp("TestResult.xml", "TestResult.$project.$index.xml", true)
		project.Test()

#перед запуском тестов нам нужно собрать проект, тк в проекте могут быть
#boo миграции которые используют классы из проекта
task @TryToBuild, [@PrepareBuild, @TryBeforeTest]:
	projectFile = FindSln()
	raise "Не удалось найти файл проекта" unless projectFile
	MsBuild(projectFile,
			Target: "build",
			FrameworkVersion: Globals.FrameworkVersion,
			ExecutablePath: Globals.Maybe.MsbuildExe).Execute()

task @TryBeforeTest:
	if Engine.Tasks.FirstOrDefault({t| t.Name == @BeforeTest}):
		Engine.Execute(@BeforeTest)
