import System
import System.IO
import System.Linq
import System.Linq.Enumerable
import System.Collections.Generic
import MySql.Data.MySqlClient
import System.Linq.Enumerable from System.Core
import file from Config.bake
import file from Tools.boo
import file from Db.boo
import file from LoggingBuilder.boo

class DbProfile:
	property ImportDbs as (string) = (,)
	property ImportTables as (string) = (,)
	property IgnoreTables as (string) = (,)
	property BeforeExportSql as string
	property AfterImportSql as string
	
	def constructor():
		pass
		
	def constructor(*profiles as (DbProfile)):
		for profile in profiles:
			Tables(profile.ImportTables)
			Dbs(profile.ImportDbs)
	
	def Tables(names as string*):
		ImportTables = ImportTables.Concat(names).ToArray()
	
	def Dbs(names as string*):
		ImportDbs = ImportDbs.Concat(names).ToArray()

	def IgnoreTablesProc(names as string*):
		IgnoreTables = IgnoreTables.Concat(names).ToArray()

def PrintCommand(sql as string):
	print "----------------------------------------"
	print sql
	print "----------------------------------------"

emptyProfile = DbProfile(\
	ImportTables: ("logs.SchemaMigrations", "Farm.Regions", "Usersettings.Defaults", "Billing.Recipients",
		"ordersendrules.order_handlers", "accessright.permissions", "Usersettings.UserPermissions",
		"farm.sourcetypes", "farm.pricefmts", "documents.waybill_source_types",
		"internet.AccessCategories",
		"internet.categoriesaccessset",
		"internet.usercategories",
		"internet.status",
		"internet.AdditionalStatus",
		"internet.Services",
		"internet.statuscorrelation",
		"internet.connectbrigads",
		"internet.partners",
		"internet.tariffs",
		"internet.networkzones")
)

catalogProfile = DbProfile(emptyProfile)
catalogProfile.Tables(("catalogs.assortment", "catalogs.catalog", "catalogs.catalogforms",
	"catalogs.catalognames", "catalogs.descriptions", "catalogs.mnn",
	"catalogs.producerequivalents", "catalogs.producers", "catalogs.productproperties",
	"catalogs.products", "catalogs.properties",
	"catalogs.propertyvalues",
	"farm.rejects"))

customersProfile = DbProfile(emptyProfile)
customersProfile.Dbs(("accessright", "billing", "catalogs", "contacts", "customers", "ordersendrules", "usersettings"))
customersProfile.Tables(("farm.CostFormRules", "farm.FormRules", "farm.sources", "documents.waybill_sources", "logs.authorizationdates", "documents.certificatesources", "documents.sourcesuppliers", "reports.general_reports"))
customersProfile.IgnoreTablesProc(emptyProfile.ImportTables)

reportTypesProfile = DbProfile(catalogProfile)
reportTypesProfile.Tables(("reports.enum_values",
	"reports.general_reports",
	"reports.property_enums",
	"reports.report_properties",
	"reports.report_property_values",
	"reports.report_type_properties",
	"reports.reports",
	"reports.reporttypes",
	"billing.Payers",
	"accessright.regionaladmins",
	"accessright.adminspermissions",
	"customers.Clients",
	"customers.Services",
	"customers.Users",
	"logs.reportslogs",
	"reports.drugs",
	"reports.markups"))

reportsProfile = DbProfile(customersProfile, reportTypesProfile)

reportstestProfile = DbProfile(reportTypesProfile)
reportstestProfile.Tables(("Customers.Suppliers",
	"Customers.Users",
	"Customers.Clients",
	"Customers.Addresses",
	"Usersettings.PricesData",
	"Usersettings.RetClientsSet",
	"Usersettings.PricesCosts",
	"Usersettings.PriceItems",
	"Usersettings.PricesRegionalData",
	"Usersettings.RegionalData",
	"Customers.Intersection",
	"Usersettings.SupplierIntersection",
	"Usersettings.PriceIntersections",
	"Usersettings.DelayOfPayments",
	"Customers.UserPrices",
	"billing.Payers",
	"farm.CostFormRules",
	"farm.FormRules"))

coreProfile = DbProfile(customersProfile)
coreProfile.Tables(("farm.Core0", "farm.CoreCosts", "farm.Synonym", "farm.SynonymFirmCr"))

drugsProfile = DbProfile(customersProfile, coreProfile)

ordersProfile = DbProfile(catalogProfile, reportTypesProfile)
ordersProfile.Tables(("Orders.OrdersHead", "Orders.OrdersList",
	"farm.Synonym", "farm.SynonymFirmCr",
	"Customers.Suppliers",
	"Customers.Clients",
	"Customers.Addresses",
	"Usersettings.PricesData",
	"Usersettings.RetClientsSet",
	"Billing.Payers",
	"Billing.LegalEntities"))

documentsProfile = DbProfile(catalogProfile)
documentsProfile.Tables(("documents.documentheaders", "documents.documentbodies", "Customers.Suppliers",
	"Customers.Clients", "Billing.Payers", "logs.document_logs"))

emptyOrdersProfile = DbProfile()
emptyOrdersProfile.Tables(("Orders.OrdersHead", "Orders.OrdersList"))

InternetProfile = DbProfile(\
	ImportDbs: ("accessright", "analit", "internet"),
	ImportTables : emptyProfile.ImportTables,
	IgnoreTables : emptyProfile.ImportTables
)

PrgDataProfile = DbProfile(\
	ImportTables: ("logs.SchemaMigrations", "accessright.permissions",
		"documents.waybill_source_types", "documents.waybill_sources",
		"billing.Recipients", "billing.payers", "billing.legalentities", "billing.payerclients",
		"billing.accounts"),
	ImportDbs: ("usersettings", "customers", "farm", "contacts", "ordersendrules", "catalogs"),
	IgnoreTables: ("farm.core0", "farm.corecosts", "farm.CoreArchive", "farm.synonymarchive", "farm.usedsynonymlogs", "farm.usedsynonymfirmcrlogs", "farm.unrecexp", "farm.forb", "farm.forbidden"),
	BeforeExportSql: """
drop table if exists farm.core_dump;
CREATE TABLE  `farm`.`core_dump` (
  `Id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `PriceCode` int(10) unsigned DEFAULT NULL,
  `ProductId` int(10) unsigned DEFAULT NULL,
  `CodeFirmCr` int(10) unsigned DEFAULT NULL,
  `SynonymCode` int(10) unsigned DEFAULT NULL,
  `SynonymFirmCrCode` int(10) unsigned DEFAULT NULL,
  `Code` varchar(20) NOT NULL,
  `CodeCr` varchar(20) NOT NULL,
  `Unit` varchar(15) NOT NULL,
  `Volume` varchar(100) NOT NULL,
  `Quantity` varchar(15) NOT NULL,
  `Note` varchar(100) DEFAULT NULL,
  `Period` varchar(20) NOT NULL,
  `Exp` date DEFAULT NULL,
  `Doc` varchar(20) NOT NULL,
  `Junk` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `Await` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `MinBoundCost` decimal(8,2) unsigned DEFAULT NULL,
  `VitallyImportant` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `RequestRatio` smallint(5) unsigned DEFAULT NULL,
  `RegistryCost` decimal(8,2) unsigned DEFAULT NULL,
  `MaxBoundCost` decimal(8,2) unsigned DEFAULT NULL,
  `OrderCost` decimal(8,2) unsigned DEFAULT NULL,
  `MinOrderCount` int(10) unsigned DEFAULT NULL,
  `UpdateTime` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `QuantityUpdate` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ProducerCost` decimal(12,6) unsigned DEFAULT NULL,
  `NDS` smallint(5) unsigned DEFAULT NULL,
  `EAN13` varchar(20) DEFAULT NULL,
  `CodeOKP` int(10) unsigned DEFAULT NULL,
  `Series` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB;

insert into farm.core_dump
select c.*
from farm.core0 c
join Usersettings.PricesData pd on pd.PriceCode = c.PriceCode
join Customers.Suppliers s on s.Id = pd.FirmCode
where s.Id in (5, 14, 36, 129, 216, 4138);

drop table if exists farm.corecosts_dump;
CREATE TABLE  `farm`.`corecosts_dump` (
  `Core_Id` bigint(20) unsigned DEFAULT NULL,
  `PC_CostCode` int(10) unsigned DEFAULT NULL,
  `Cost` decimal(12,6) unsigned DEFAULT NULL,
  `RequestRatio` smallint(5) unsigned DEFAULT NULL,
  `MinOrderSum` decimal(8,2) unsigned DEFAULT NULL,
  `MinOrderCount` int(10) unsigned DEFAULT NULL,
  `Id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB;


insert into farm.corecosts_dump
select cc.*
from farm.core0 c
join Usersettings.PricesData pd on pd.PriceCode = c.PriceCode
join Customers.Suppliers s on s.Id = pd.FirmCode
join farm.CoreCosts cc on cc.Core_Id = c.Id
where s.Id in (5, 14, 36, 129, 216, 4138);
""",
	AfterImportSql: """
insert into farm.core0
SELECT * FROM farm.core_dump c;
insert into farm.corecosts
SELECT * FROM farm.corecosts_dump c;
update PriceItems
set PriceDate = now(), LastFormalization = now();
"""
)

profiles = {@empty: emptyProfile,
	@catalog: catalogProfile,
	@core: coreProfile,
	@internet: InternetProfile,
	@reportTypes: reportTypesProfile,
	@reports: reportsProfile,
	@drug: drugsProfile,
	@customers: customersProfile,
	@orders: ordersProfile,
	@emptyOrders: emptyOrdersProfile,
	@reportTest: reportstestProfile,
	@documents: documentsProfile,
	@PrgData: PrgDataProfile}


desc """
дампит полную схему рабочей базы в файл dump.txt удобно если надо поискать что то в схеме, например использование определенных таблиц в триггерах или процедурах
"""
Task "db:dump":
	user = Ask("user:")
	password = AskPassword("password:")
	host = Ask("host:")
	Sh("mysqldump -h$host -u$user -p$password --lock-tables=false --all-databases --events --no-data --routines --triggers > dump.txt")

def ImportSchema(mysqldump as string, mysql as string):
	excludes = ("mysql", "information_schema", "performance_schema", "test")
	db = Db(Globals.Environments[@Development].ToString())
	databases = join(db.ReadSql("show databases").Select({r| r.Database.ToString()}).Where({d| not excludes.Any({e| e == d})}).ToArray())
	Sh("$mysqldump --databases $databases --add-drop-database --skip-triggers --no-data > schema.txt")
	Sh("$mysqldump --databases $databases --events --routines --triggers --no-data --no-create-db --no-create-info > schema.routnies.txt")
	Sh("$mysql < schema.txt")
	unless Configuration.Maybe.DoNotClean:
		Rm("schema.txt")

def ImportDatabases(mysqldump as string, mysql as string, databases as (string), ignoreTables as string*):
	ignoreTablesOption = join(ignoreTables.Select({t| "--ignore-table=" + t}).ToArray())
	return unless databases
	i = 0
	for database in databases:
		print "export $database ${++i} of ${len(databases)}"
		filename = "db.data.$database.txt"
		Sh("$mysqldump --skip-triggers --no-create-db --no-create-info $database $ignoreTablesOption > $filename")
		print "import $database"
		Sh("$mysql -D$database < $filename")
		unless Configuration.Maybe.DoNotClean:
			Rm(filename)

def ImportTables(mysqldump as string, mysql as string, tables as (string)):
	return unless tables
	i = 0
	for table in tables:
		database, tableName = table.Split(char('.'))
		print "export $table ${++i} of ${len(tables)}"
		filename = "table.data.$table.txt"
		Sh("$mysqldump --skip-triggers --no-create-db --no-create-info --tables $database $tableName > $filename")
		print "import $table"
		Sh("$mysql -D$database < $filename")
		unless Configuration.Maybe.DoNotClean:
			Rm(filename)

def ReadEnvVariable(name as string, defaultValue):
	return Configuration[name] if Configuration.IsDefined(name)
	return Globals[ToPascal(name)] if Globals.IsDefined(ToPascal(name))
	return defaultValue

desc """
Загружает тестовые данные и применяет не примененные миграции
"""
task "db:setup", ["db:seed", "db:migrate"]

desc """
используй db:setup
"""
task @CleanDb, ["db:setup"]

desc """
используй db:seed
"""
task @PrepareLocal, ["db:seed"]

desc """
заливает в локальную базу данных схему из тестовой и таблицы справочники такие как regions
параметры:
SkipBeforeSql - игнорируется sql запрос который указан в профиле который нужно выполнить перед
экспортом
DoNotClean - не удаляет файлы дампа
profile - название профиля для загрузки, профиль определяет какие таблицы кроме стандартных
будут загружены
значения:
empty - только схема и справочные таблицы
catalogs - загружается вся база дынных catalogs
customers - customers, billing, usersettings, catalogs, contacts, ordersendrules и источники из farm и documents
"""
task "db:seed":
	sourceDb = "testsql.analit.net"
	destination = "localhost"
	user = "system"
	password = "newpass"

	version = ExecuteProcess("mysqldump", "--version")
	mysql56fix = ""
	if version.Contains("5.6"):
		mysql56fix = "--set-gtid-purged=OFF"
	mysqldump = "mysqldump -h${sourceDb} -u${user} -p${password} --lock-tables=false $mysql56fix --default-character-set=cp1251 --allow-keywords --max_allowed_packet=32M"
	mysql = "mysql -h$destination -uroot"
	local = Globals.Environments[@Local].ToString()
	localLong = Globals.Environments[@LocalLong].ToString()
	if Environment.MachineName.ToLower() == "devsrv":
		port = Globals.Maybe.Port or Configuration.Maybe.Port
		if port:
			mysql = "$mysql --port=$port"
			local += ";port=$port" unless local.Contains("port")
			localLong += ";port=$port" unless localLong.Contains("port")

	profileName = ReadEnvVariable(@profile, @empty)
	profile = profiles[profileName]
	unless profile:
		all = join(profiles.Keys)
		raise "не знаю что за профиль $profileName, есть $all"

	db = Db(Globals.Environments[@DevelopmentLong].ToString())
	localDb = Db(local)
	localLongDb = Db(localLong)

	if not Configuration.Maybe.SkipBeforeSql and profile.BeforeExportSql:
		print "execute before export sql"
		db.ExecuteSql(profile.BeforeExportSql)

	unless Configuration.Maybe.SkipSchema:
		ImportSchema(mysqldump, mysql)

	unless localDb.ReadSql("select * from mysql.user where User = 'RootDBMS'").Count():
		sql = "flush privileges;CREATE USER 'RootDBMS'@'127.0.0.1';GRANT ALL PRIVILEGES ON *.* TO 'RootDBMS'@'127.0.0.1';"
		Sh("$mysql --execute=\"$sql\"")

	ImportDatabases(mysqldump, mysql, profile.ImportDbs, profile.IgnoreTables)
	ImportTables(mysqldump, mysql, profile.ImportTables)

	if profile.AfterImportSql:
		print "execute after import sql"
		localLongDb.ExecuteSql(profile.AfterImportSql)

	unless Configuration.Maybe.SkipSchema:
		filename = "schema.routnies.txt"
		Sh("$mysql < $filename")
		unless Configuration.Maybe.DoNotClean:
			Rm(filename)
