import System
import System.Collections.Generic
import System.Linq.Enumerable
import System.Threading
import System.Linq.Enumerable from System.Core
import System.IO
import System.ServiceProcess
import System.ComponentModel
import System.Security.Principal
import System.Runtime.InteropServices
import System.Diagnostics
import System.Security

#[StructLayout(LayoutKind.Sequential, CharSet=CharSet.Auto)]
struct StartupInfo:
	public cb as int
	public reserved as String
	public desktop as String
	public title as String
	public x as int
	public y as int
	public xSize as int
	public ySize as int
	public xCountChars as int
	public yCountChars as int
	public fillAttribute as int
	public flags as int
	public showWindow as UInt16
	public reserved2 as UInt16
	public reserved3 as byte
	public stdInput as IntPtr
	public stdOutput as IntPtr
	public stdError as IntPtr

struct ProcessInformation:
	public process as IntPtr
	public thread as IntPtr
	public processId as int
	public threadId as int

[DllImport("advapi32.dll", SetLastError: true, CharSet: CharSet.Unicode)]
def CreateProcessWithLogonW(lpUsername as string, lpDomain as string, lpPassword as string, dwLogonFlags as uint, lpApplicationName as string, commandLine as string, dwCreationFlags as uint, lpEnvironment as IntPtr, currentDirectory as string, ref startupInfo as StartupInfo, ref processInformation as ProcessInformation) as bool:
	pass

project = Globals.Maybe.Project
buildTo = Path.GetFullPath("build")

params = { "OutDir" : buildTo + "\\", "Configuration" : "release" }
if Globals.IsDefined("platform"):
	params.Add("Platform", Globals.platform)



def Impersonate(server as string, action as Action):
	user as string
	password as string
	user = ""
	password = ""

	if Globals.Maybe.User:
		user = Globals.User
	if Globals.Maybe.Password:
		password = Globals.Password

	if String.IsNullOrEmpty(user) or String.IsNullOrEmpty(password):
		Console.Write("user for $server: ")
		user = Console.ReadLine()
		Console.Write("password: ")
		password = GetPassword()


	LOGON32_PROVIDER_DEFAULT = 0;
	LOGON32_LOGON_INTERACTIVE = 2;
	tokenHandle = IntPtr.Zero;

	if not LogonUser(user, "", password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle):
		raise Win32Exception()

	Globals.User = user
	Globals.Password = password

	using WindowsIdentity.Impersonate(tokenHandle):
		try:
			action()
		ensure:
			CloseHandle(tokenHandle);

def GetServers():
	return GetServersToDeploy(Globals)

unless serviceName = Globals.Maybe.ServiceName:
	serviceName = project

task "sudo":
	cmd = Configuration.cmd
	user = "deployer"
	password = '$sdfsd887!'
	app = "cmd.exe"
	#args = "/C \"$cmd\""
	args = "/C dir"
	info = StartupInfo()
	info.flags = 0x00000100
	#info.flags &= 0x00000001
	#info.stdOutput = cast(IntPtr, -11)
	#info.stdError = cast(IntPtr, -12)
	processInfo = ProcessInformation()
	unless CreateProcessWithLogonW(user, "analit", password, 1, app, args, 0, IntPtr.Zero, Directory.GetCurrentDirectory(), info, processInfo):
		raise Win32Exception()

task @ServiceDeployPipeline, [@Production, "packages:install", "fix:packages", "check", @BuildService, @StopServices, @Production, "db:migrate", @Backup, @SimpleDeployService, @SendDeployNotification]

task @ServiceDeployPipeline2, [@Production, "packages:install", "fix:packages", "check", @Build, @StopServices, @Production, "db:migrate", @Backup, @DeployApp, @StartServices, @SendDeployNotification]

task @BuildService, [@CleanService]:
	project = Globals.Project
	verbosity = "/verbosity:quiet"
	projectFile = Path.GetFullPath("src/${project}/${project}.csproj")
	if Configuration.Maybe.msbuildDebug:
		verbosity = "/verbosity:detailed"
	MsBuild(projectFile, verbosity, "/nologo",
			Target : "build",
			Parameters : params,
			FrameworkVersion : Globals.FrameworkVersion).Execute()
	Rm("${buildTo}/*.xml")
	sufix = GetConfigSufix(Globals)
	Cp("src/${project}/App.$sufix", "${buildTo}/${project}.exe.config", true)

task @CleanService:
	project = Globals.Project
	verbosity = "/verbosity:quiet"
	projectFile = Path.GetFullPath("src/${project}/${project}.csproj")
	if Configuration.Maybe.msbuildDebug:
		verbosity = "/verbosity:detailed"
	MsBuild(projectFile, verbosity, "/nologo",
			Target : "clean",
			Parameters : params,
			FrameworkVersion : Globals.FrameworkVersion).Execute()
	if Exist(buildTo):
		Rm("${buildTo}/*", true)
	else:
		MkDir(buildTo)

task @RestartServices:
	servers = GetServers()
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)
		StartServices(services)

task @StopServices:
	servers = GetServers()
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)

task @StartServices:
	servers = GetServers()
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StartServices(services)

task @DeployService, [@BuildService]:
	servers = GetServers()
	rootServer = servers.First()
	deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)
		RepeatTry:
			Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
		StartServices(services)

task @NakedDeployService:
	servers = GetServers()
	rootServer = servers.First()
	deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	RepeatTry:
		Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)

task @SimpleDeployService:
	servers = GetServers()
	rootServer = servers.First()
	deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		RepeatTry:
			Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
		StartServices(services)
