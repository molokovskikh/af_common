import System
import System.Collections.Generic
import System.Linq.Enumerable
import System.Threading
import System.Linq.Enumerable from System.Core
import System.IO
import System.ServiceProcess
import System.ComponentModel
import System.Security.Principal
import System.Runtime.InteropServices
import file from Tools.boo
import file from Migration.bake
import file from Deploy.bake

[DllImport("advapi32.dll", SetLastError: true, CharSet: CharSet.Unicode)]
def LogonUser(lpszUsername as String, lpszDomain as String, lpszPassword as String, dwLogonType as int, dwLogonProvider as int, ref phToken as IntPtr) as bool:
	pass

[DllImport("kernel32.dll", CharSet: CharSet.Auto)]
def CloseHandle(handle as IntPtr) as bool:
	pass

project = Globals.Maybe.Project
buildTo = Path.GetFullPath("build")
projectFile = Path.GetFullPath("src/${project}/${project}.csproj")

params = { "OutDir" : buildTo + "\\", "Configuration" : "release" }
if Globals.IsDefined("platform"):
	params.Add("Platform", Globals.platform)

def StartServices(services as ServiceController*):
	for service in services:
		service.Start()

def StopServices(services as ServiceController*):
	for service in services:
		if service.Status != ServiceControllerStatus.Stopped:
			service.Stop()

	for service in services:
		done = false
		iteration = 0
		while not done:
			iteration++
			service.WaitForStatus(ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(20))
			done = service.Status == ServiceControllerStatus.Stopped or iteration > 3
			if not done:
				print "служба не остановилась за 20 секунд, буду ждать, всего жду 3 раза по 20 секунд"

def GetServices(serviceName as string, servers as string*):
	services = List of ServiceController()
	for server in servers:
		serverServices = ServiceController.GetServices(server).Where({s| s.ServiceName == serviceName}).ToList()
		if not serverServices.Count:
			raise "Can`t find service \"${serviceName}\" on server ${server}"
		services.AddRange(serverServices)
	return services

def Impersonate(server as string, action as Action):
	user as string
	password as string
	user = ""
	password = ""

	if Globals.Maybe.User:
		user = Globals.User		
	if Globals.Maybe.Password:
		password = Globals.Password

	if String.IsNullOrEmpty(user) or String.IsNullOrEmpty(password):
		Console.Write("user for $server: ")
		user = Console.ReadLine()
		Console.Write("password: ")
		password = GetPassword()


	LOGON32_PROVIDER_DEFAULT = 0;
	LOGON32_LOGON_INTERACTIVE = 2;
	tokenHandle = IntPtr.Zero;

	if not LogonUser(user, "", password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle):
		raise Win32Exception()

	Globals.User = user
	Globals.Password = password

	using WindowsIdentity.Impersonate(tokenHandle):
		try:
			action()
		ensure:
			CloseHandle(tokenHandle);

def GetServers():
	servers = List of string()
	if Globals.Maybe.Servers:
		for server in Globals.Maybe.Servers:
			servers.Add(server.ToString())

	if not servers.Count:
		servers.Add(Globals.Server.ToString())
	return servers

unless serviceName = Globals.Maybe.ServiceName:
	serviceName = project

task @ServiceDeployPipeline, ["packages:install", "check", @BuildService, @StopServices, @Production, @Migrate, @Backup, @SimpleDeployService, @SendDeployNotification]

task @ServiceDeployPipeline2, ["packages:install", "check", @Build, @StopServices, @Production, @Migrate, @Backup, @DeployApp, @StartServices, @SendDeployNotification]

task @BuildService, [@CleanService]:
	project = Globals.Project
	MsBuild(projectFile, "/verbosity:quiet", "/nologo",
			Target : "build",
			Parameters : params,
			FrameworkVersion : Globals.FrameworkVersion).Execute()
	Rm("${buildTo}/*.xml")
	Cp("src/${project}/App.release.config", "${buildTo}/${project}.exe.config", true)

task @CleanService:
	MsBuild(projectFile, "/verbosity:quiet", "/nologo",
			Target : "clean",
			Parameters : params,
			FrameworkVersion : Globals.FrameworkVersion).Execute()
	if Exist(buildTo):
		Rm("${buildTo}/*", true)
	else:
		MkDir(buildTo)

task @RestartServices:
	servers = GetServers()
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)
		StartServices(services)

task @StopServices:
	servers = GetServers()
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)

task @StartServices:
	servers = GetServers()
	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StartServices(services)
	

task @DeployService, [@BuildService]:
	servers = GetServers()
	rootServer = servers.First()
	deployTo = "\\\\$rootServer\\$project"
	if Globals.Maybe.DeployTo:
		deployTo = Globals.DeployTo

	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)
		

		fin = false
		interation = 0
		while not fin:
			try:
				Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
				fin = true
			except e:
				raise if not e.Message.Contains("The process cannot access the file")
				interation++
				if interation >= 3:
					raise
				print "can`t access files, sleep..."
				System.Threading.Thread.Sleep(1000)

		StartServices(services)

task @NakedDeployService:
	servers = GetServers()
	rootServer = servers.First()
	deployTo = "\\\\$rootServer\\$project"
	if Globals.Maybe.DeployTo:
		deployTo = Globals.DeployTo

	fin = false
	interation = 0
	while not fin:
		try:
			Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
			fin = true
		except e:
			raise if not e.Message.Contains("The process cannot access the file")
			interation++
			if interation >= 3:
				raise
			print "can`t access files, sleep..."
			System.Threading.Thread.Sleep(1000)

task @SimpleDeployService:
	servers = GetServers()
	rootServer = servers.First()
	deployTo = "\\\\$rootServer\\$project"
	if Globals.Maybe.DeployTo:
		deployTo = Globals.DeployTo

	Impersonate(servers.First()):
		services = GetServices(serviceName, servers)

		fin = false
		interation = 0
		while not fin:
			try:
				Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
				fin = true
			except e:
				raise if not e.Message.Contains("The process cannot access the file")
				interation++
				if interation >= 3:
					raise
				print "can`t access files, sleep..."
				System.Threading.Thread.Sleep(3000)

		StartServices(services)
