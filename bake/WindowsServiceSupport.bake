import System
import System.Collections.Generic
import System.Linq.Enumerable
import System.Threading
import System.Linq.Enumerable from System.Core
import System.IO
import System.ServiceProcess
import System.ComponentModel
import System.Security.Principal
import System.Runtime.InteropServices
import System.Diagnostics
import System.Security

task @ServiceDeployPipeline, ["env", "check:env", "packages:install", "packages:fix", "check", "version:bump", @BuildService, @StopServices, "db:migrate", @Backup, @SimpleDeployService, "deploy:notify"]

task @ServiceDeployPipeline2, ["env", "check:env", "packages:install", "packages:fix", "check", "version:bump", @Build, @StopServices, "db:migrate", @Backup, @DeployApp, @StartServices, "deploy:notify"]

task @BuildService, [@CleanService, "generate:assembly:info"]:
	Build(Globals, Globals.Project)

task "check:env":
	if Globals.Environment != @Production:
		raise "Развертывание сервиса возможно только в Production среде"

task @CleanService:
	Clean(Globals, Globals.Project)

task @RestartServices:
	serviceName = Globals.Maybe.ServiceName or Globals.Maybe.Project
	servers = GetServersToDeploy(Globals)
	Impersonate(Globals, servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)
		StartServices(services)

task @StopServices:
	serviceName = Globals.Maybe.ServiceName or Globals.Maybe.Project
	servers = GetServersToDeploy(Globals)
	Impersonate(Globals, servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)

task @StartServices:
	serviceName = Globals.Maybe.ServiceName or Globals.Maybe.Project
	servers = GetServersToDeploy(Globals)
	Impersonate(Globals, servers.First()):
		services = GetServices(serviceName, servers)
		StartServices(services)

task @DeployService, [@BuildService]:
	project = Globals.Maybe.Project
	serviceName = Globals.Maybe.ServiceName or Globals.Maybe.Project
	servers = GetServersToDeploy(Globals)
	rootServer = servers.First()
	deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	_, buildTo, _ = GetBuildConfig(Globals)
	Impersonate(Globals, servers.First()):
		services = GetServices(serviceName, servers)
		StopServices(services)
		RepeatTry:
			Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
		StartServices(services)

task @NakedDeployService:
	project = Globals.Maybe.Project
	servers = GetServersToDeploy(Globals)
	rootServer = servers.First()
	deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	_, buildTo, _ = GetBuildConfig(Globals)
	RepeatTry:
		Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)

task @SimpleDeployService:
	serviceName = Globals.Maybe.ServiceName or Globals.Maybe.Project
	project = Globals.Maybe.Project
	servers = GetServersToDeploy(Globals)
	rootServer = servers.First()
	deployTo = Globals.Maybe.DeployTo or "\\\\$rootServer\\$project"
	_, buildTo, _ = GetBuildConfig(Globals)
	Impersonate(Globals, servers.First()):
		services = GetServices(serviceName, servers)
		RepeatTry:
			Cp(FileSet("**.*", BaseDirectory : buildTo), deployTo, true)
		StartServices(services)
