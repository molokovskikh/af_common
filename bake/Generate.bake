import System
import System.IO
import System.Collections
import System.Linq.Enumerable
import Castle.MonoRail.Views.Brail
import Castle.MonoRail.Framework

class Script:
	property Path as string
	property Type as string
	property Name as string

def GenerateFile(name as string, output as string, options as IDictionary):
	templateRoot = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "templates")
	loader = FileAssemblyViewSourceLoader(templateRoot)
	engine = StandaloneBooViewEngine(loader, BooViewEngineOptions())
	using writer = File.CreateText(output):
		engine.Process(name, writer, options)
	print "create $output"

desc """
генерирует шаблон для javascript теста
параметры file - название файла с тестами
"""
task @GenerateJsTest:
	testFile = Configuration.file
	test = Configuration.Maybe.test
	script = Configuration.Maybe.script

	script = testFile unless script

	testFile += ".html" unless Path.GetExtension(testFile)
	testCoffee = Path.ChangeExtension(testFile, ".coffee")
	testRoot = "test"
	testCoffee = Path.Combine(testRoot, testCoffee)
	testFile = Path.Combine(testRoot, testFile)

	scripts = (Script(Name: script), Script(Path: Path.ChangeExtension(Path.GetFileName(testCoffee), ".js")))
	project = Globals.Project
	assets = ("src/$project/Assets/JavaScript/", "src/$project/JavaScript/")
	for scriptFile in scripts:
		unless scriptFile.Path or Exist(scriptFile.Path):
			mask = scriptFile.Name
			mask += ".*" unless Path.GetExtension(mask)
			for path in assets:
				continue unless Exist(path)
				files = Directory.GetFiles(path, mask)
				if files.Length:
					scriptFile.Path = Path.Combine("../", files[0])
					if Path.GetExtension(scriptFile.Path).ToLower() == ".coffee":
						scriptFile.Type = "text/coffeescript"
					break

	scripts = scripts.Where({s| s.Path != null}).ToArray()

	parameters ={@project: project, @test: test, @scripts: scripts}
	GenerateFile("CoffeeTest.html", testFile, parameters)
	GenerateFile("CoffeeTest.coffee", testCoffee, parameters)
