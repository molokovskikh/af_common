import System
import System.Text.RegularExpressions
import System.Resources
import System.Reflection
import System.IO
import System.Net
import System.Diagnostics
import System.Linq.Enumerable
import System.Xml from System.Xml
import System.Xml.Linq
import System.Xml.XPath.Extensions from System.Xml.Linq
import Bake.Win32.Helper
import System.Linq.Enumerable
import Ionic.Zip
import Boo.Lang.Interpreter
import Boo.Lang.Compiler
import Boo.Lang.Compiler.TypeSystem.Reflection
import Mono.Cecil
import Mono.Cecil.Rocks
import Ude

desc """
Заменяет TargetFramework во всех проектах на параметер указанный в Version
"""
task @UpdateTargetFramework:
	version = Configuration.Version
	for project in FileSet("src/**.*proj").Files:
		doc = XDocument.Load(project)
		manager = XmlNamespaceManager(NameTable())
		manager.AddNamespace("p", "http://schemas.microsoft.com/developer/msbuild/2003")
		element = doc.XPathSelectElement("//p:TargetFrameworkVersion", manager)
		if element.Value == "v" + version:
			continue
		element.Value = "v" + version
		doc.Save(project)
		print "${project} patched"

def PatchProject(project as string):
	doc = XDocument.Load(project)
	rootNamespace = doc.Root.Name.NamespaceName
	manager = XmlNamespaceManager(NameTable())
	manager.AddNamespace("p", "http://schemas.microsoft.com/developer/msbuild/2003")
	#!BUG doc.XPathSelectElements("//p:Reference", manager):
	#print doc.XPathSelectElement("//p:TargetFrameworkVersion", manager)
	for node in doc.XPathSelectElements("//p:Reference", manager):
		lib = node.Attribute("Include").Value
		lib = lib.Split(char(','))[0]
		libFile = FileSet("lib/**/*.dll").Files.FirstOrDefault()
		continue unless libFile
		libPath = ""# CalculateRelativePath(project, libFile)
		path = node.XPathSelectElement("p:HintPath", manager)
		if not path:
			print "add ${libPath}"
			node.Add(XElement(XName.Get("HintPath", rootNamespace), libPath))
			continue
		else:
			currentLibPath = Path.Combine(Path.GetDirectoryName(project), path.Value)
			if not Exist(currentLibPath):
				print "fixed path from $currentLibPath to $libPath"
				path.Value = libPath
	doc.Save(project)

desc """
Правит путь к библиотекам, почему то иногда библиотеки создаются по не правильным путям
хотя я уверен что буть был верен, может быть resharper косячит, пример bake PatchLibs
"""
task @PatchLibs:
	for dir in Directory.GetDirectories("src"):
		dir = Path.GetFileName(dir)
		project = "src/$dir/$dir.csproj"
		continue if not Exist(project)
		PatchProject(project)

desc """
добавляет в path путь к sdk и .net framework
"""
task @UpdatePath:
	path = Environment.GetEnvironmentVariable("PATH", EnvironmentVariableTarget.User)
	sdkPath = MicrosoftSdk.Path()
	frameworkPath = FrameworkInformation.Actual.FullPath
	path = "$path;$sdkPath;$frameworkPath"
	Environment.SetEnvironmentVariable("PATH", path, EnvironmentVariableTarget.User)

desc """
в переменную path текущего пользователя будет добавлена текущая директория
"""
task @pathize:
	path = Environment.GetEnvironmentVariable("PATH", EnvironmentVariableTarget.User)
	current = Path.GetFullPath(".")
	path = "$path;$current"
	Environment.SetEnvironmentVariable("PATH", path, EnvironmentVariableTarget.User)

desc """
запускает интерпритатор boo
"""
task @shell:
	CompilerParameters.SharedTypeSystemProvider = ReflectionTypeSystemProvider()
	interpreter = InteractiveInterpreter()
	interpreter.SetValue("bake", Engine)
	console = InteractiveInterpreterConsole(interpreter)
	console.Eval("import Boo.Lang.Interpreter.Builtins")
	Bake.Shell.MakeFuzzi(interpreter, console)
	console.ReadEvalPrintLoop()

desc """
загружает сборку проекта и bake скрипты которые хранятся в папке tasks
"""
task @LoadProject, [@LoadAssemblies]:
	if Exist("tasks"):
		for file in Directory.GetFiles("tasks", "*.bake"):
			using reader = File.OpenText(file):
				try:
					Engine.Loader.Load(file)
				except e:
					print e

task "dump:resource":
	using reader = ResourceReader(Configuration.file.ToString()):
		for i in reader:
			print "${i.Key} = ${i.Value}"

task "fix:js:ref":
	ver = "\\d+(\\.\\d+){1,3}"
	packages = Directory.GetDirectories("packages")
	terms = packages.Select({p| Path.GetFileName(p)}).ToArray()
	files = FileSet("packages/**/*.js")
	js = files.Select({f| Path.GetFileName(f)}).Concat(files.Select({f| Path.GetFileNameWithoutExtension(f)})).Where({f| Regex.IsMatch(f, ver)}).ToArray()
	terms = js.Concat(terms).ToArray()
	targets = FileSet("test/*.html").Concat(FileSet("src/**/*.brail").Concat(FileSet("src/**/*.master").Concat(FileSet("src/**/*.aspx")).Concat(FileSet("test/test.js"))))
	if Configuration.Maybe.debug:
		for f in terms:
			print f
		for f in targets:
			print f
	for f in targets:
		encoding = Encoding.UTF8
		using s = File.OpenRead(f):
			s.Position = 0
			detector = CharsetDetector()
			detector.Feed(s)
			detector.DataEnd()
			if detector.Charset:
				encoding = Encoding.GetEncoding(detector.Charset)
		lines = File.ReadAllText(f, encoding)
		write = false
		for term in terms:
			match = Regex(ver).Match(term)
			name = Regex.Escape(term.Substring(0, match.Index))
			name += ver
			name += Regex.Escape(term.Substring(match.Index + match.Length, term.Length - match.Index - match.Length))
			reg = Regex(name, RegexOptions.IgnoreCase)
			result = reg.Replace(lines, term)
			if lines != result:
				lines = result
				write = true
		if write:
			File.WriteAllText(f, lines, Encoding.UTF8)
