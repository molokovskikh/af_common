import System
import Bake.IO.Extensions
import Bake.Compiler.Extensions
import Bake.Win32.Helper
import System.IO
import System.Security.Cryptography.X509Certificates
import Microsoft.Win32
import Microsoft.Build.Tasks.Deployment.ManifestUtilities

def CopyWithDeploy(fileSet as FileSet, destination as string):
	for file in fileSet.Files:
		dir = Path.GetDirectoryName(file).Replace(fileSet.BaseDirectory, destination)
		MkDir(dir) if not Exist(dir)
		Cp(file, file.Replace(fileSet.BaseDirectory, destination) + ".deploy")

def GeneratePublishPage(file as string, version as string, productName as string):
	template = File.ReadAllText(GetResource("publish.htm.template"))
	result = template.Replace("{version}", version)
	result = result.Replace("{name}", productName)
	File.AppendAllText(file, result)

def BootstrapperSdkPath() as string:
	key = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\GenericBootstrapper\\4.0")
	if key:
		path = key.GetValue("Path", "").ToString()
		key.Close()
		return path
	key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Wow6432Node\\Microsoft\\GenericBootstrapper\\4.0")
	if key:
		path = key.GetValue("Path", "").ToString()
		key.Close()
		return path
	return Path.GetFullPath(Path.Combine(MicrosoftSdk.Path(), "..", "Bootstrapper"))

def GetAssemblyVersion(assemblyFile as string) as string:
	return System.Reflection.Assembly.LoadFile(assemblyFile).GetName().Version.ToString()

def ClearDir(dirname as string):
	return unless Exist(dirname)

	for delDirName in Directory.GetDirectories(dirname):
		Directory.Delete(delDirName, true)
	for fname in Directory.GetFiles(dirname):
		File.Delete(fname)

projectName = Globals.Maybe.Project
productName = Globals.Maybe.HumanReadableName
configuration = "release"
projectPath = Path.GetFullPath("src/${projectName}/")
projectFile = "${projectPath}${projectName}.csproj"
deploymentUrl = "http://publish.analit.net/${projectName}/"
publishVersion = "0.0.0.0";

buildRoot = "output"
buildTo = Path.GetFullPath("${buildRoot}/${projectName}/")
buildPublishTo = Path.GetFullPath("${buildRoot}/${projectName}Publish/")

params = { "OutDir" : "${buildTo}", "Configuration" : "release" }
if Globals.Maybe.Platform:
	params.Add("Platform", Globals.Platform)

def GetPublishTo():
	projectName = Globals.Maybe.Project
	return "${Globals.PublishRoot}\\${projectName}\\"

task @ClickOnceDeploy, ["env", "packages:install", "check", "version:bump", @ClickOnceBuild, "db:migrate", @publish, "deploy:notify"]

task @ClickOnceBuild, ["clickonce:clean", "generate:assembly:info"]:
	MsBuild(projectFile,
			Parameters : params,
			FrameworkVersion : Globals.FrameworkVersion,
			ExecutablePath: Globals.Maybe.MsbuildExe).Execute()
	config = Path.Combine(projectPath, "App." + GetConfigSufix(Globals))
	Cp(config, "${buildTo}${projectName}.exe.config", true)
	Rm(FileSet("*.*",
			BaseDirectory : buildTo,
			Excludes : ["*.dll", "*.exe", "*.config"]))
	publishVersion = GetAssemblyVersion("${buildTo}${projectName}.exe")

task "clickonce:clean":
	MsBuild(projectFile,
			Target : "clean",
			Parameters : params,
			FrameworkVersion : Globals.FrameworkVersion,
			ExecutablePath: Globals.Maybe.MsbuildExe).Execute()
	RmDir(buildTo, true) if Exist(buildTo)
	MkDir(buildTo)

task "build publish package", [@ClickOnceBuild, "clean publish package"]:
	certPath = GetResource("inforoomCS.pfx")
	password = "password"
	Cp(GetResource("publish.build"), buildPublishTo)
	MsBuild("${buildPublishTo}publish.build",
			Parameters : { "Version" : publishVersion,
							"MinVersion" : publishVersion,
							"ClickOnceUrl" : deploymentUrl,
							"ClickOnceAppTitle" : productName,
							"SolutionName" : projectName,
							"PublishDir" : buildTo,
							"SigningCert" : certPath,
							"Password" : password,
							#8.0 - последняя sdk поддерживающая net 4.0
							"SdkPath" : Path.Combine(MicrosoftSdk("v8.0A").BinPath, "NETFX 4.0 Tools"),
							"BootstrapperSdkPath" : BootstrapperSdkPath()},
			FrameworkVersion : Globals.FrameworkVersion,
			ExecutablePath: Globals.Maybe.MsbuildExe).Execute()
	CopyWithDeploy(FileSet("**\\*.*", BaseDirectory : buildTo), buildPublishTo)
	cert = X509Certificate2(File.ReadAllBytes(certPath), password)
	Exec("\"signtool.exe\"",
		 "sign /sha1 ${cert.Thumbprint} ${buildPublishTo}setup.exe").Execute()
	Rm("${buildPublishTo}/publish.build")
	GeneratePublishPage("${buildPublishTo}publish.htm", publishVersion, productName)

task "clean publish package":
	RmDir(buildPublishTo, true) if Exist(buildPublishTo)
	MkDir(buildPublishTo)

task "publish", ["build publish package", "clean publish dir"]:
	files = FileSet("**/*.*", BaseDirectory : buildPublishTo)
	MkDir(GetPublishTo()) unless Exist(GetPublishTo())
	Cp(files, GetPublishTo(), true)
	print "${files.Files.Count} files deployed to ${buildPublishTo}"

task "clean publish dir":
	ClearDir(GetPublishTo())
