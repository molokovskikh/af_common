import System
import System.IO
import file from Db.boo
import file from Tools.boo

def GetMigrationPath():
	baseDirectory = AppDomain.CurrentDomain.BaseDirectory
	raise "AppDomain.CurrentDomain.BaseDirectory вернул пустую строку" if String.IsNullOrEmpty(baseDirectory)
	parent = Directory.GetParent(Path.GetDirectoryName(baseDirectory))
	baseDirectory = Path.Combine(parent.FullName, "Migrations")
	raise "Не найдена директория с миграциями ${baseDirectory}" if not Directory.Exists(baseDirectory)
	return baseDirectory + "\\"

Global(
	Editor : "vim-nox",
	MigrationsPath : GetMigrationPath(),
	FrameworkVersion : "4.0.30319",
	DeployRoot : """\\adc.analit.net\Inforoom\WebApps\""",
	BuildRoot : "output",
	PublishRoot : """\\adc.analit.net\Inforoom\WebPublish\""",
	Environment : @Development,
	Environments : {
		@Production2 : """Data Source=dbms.adc.analit.net;Database=Usersettings;Connect Timeout=300;convert zero datetime=yes;Default Command Timeout=150;Allow User Variables=true;""", 
		@Production : """Data Source=dbms2.adc.analit.net;Database=Usersettings;Connect Timeout=300;convert zero datetime=yes;Default Command Timeout=150;Allow User Variables=true;""", 
		@Development : """Data Source=testsql.analit.net;Database=Usersettings;User ID=system;Password=newpass;Connect Timeout=300;convert zero datetime=yes;Default Command Timeout=300;Allow User Variables=true;""",
		@Local : """Data Source=localhost;Database=Usersettings;User ID=root;Password=;Connect Timeout=300;convert zero datetime=yes;Default Command Timeout=300;Allow User Variables=true;"""
	}
)

if Configuration.Maybe.env:
	Globals.Environment = ToPascal(Configuration.env)

def EnvByName(name as string) as string:
	connectionString = Globals.Environments[name]
	if not (connectionString.ToLower().Contains("user=") or connectionString.ToLower().Contains("user id=")):
		user = Ask("user for sql2.analit.net:")
		connectionString += "user=${user};"

	if not connectionString.ToLower().Contains("password="):
		password = AskPassword("password:")
		connectionString += "password=${password};"

	h = Globals.Environments
	h[Globals.Environment] = connectionString
	connectionString = Globals.Environments[Globals.Environment]
	return connectionString

def Env() as string:
	name = Globals.Environment
	unless Globals.Environments.ContainsKey(name):
		raise "Не знаю что за среда $name"
	return EnvByName(name)

Db.Current = Db(Env)