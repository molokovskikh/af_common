import System
import System.IO
import System.Reflection
import System.Collections.Generic
import System.Linq.Enumerable
import Bake.IO.Extensions

class AssemblyLocator:
	static assemblies as Dictionary[of string, Assembly]

	static def Init():
		assemblies = Dictionary[of string, Assembly]()
		AppDomain.CurrentDomain.AssemblyLoad += CurrentDomain_AssemblyLoad
		AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve

	static def CurrentDomain_AssemblyResolve(sender as object, args as ResolveEventArgs):
		#print "try to resolve ${args.Name}"
		assembly as Assembly = null
		assemblies.TryGetValue(args.Name, assembly)
		#хак сборки boo встроены в bake по этому ресолвить их не надо
		if args.Name.Contains("Boo."):
			return null

		if  args.Name.Contains("Bake."):
			return Assembly.Load("bake")

		if not assembly:
			name = args.Name
			if name.Contains(","):
				name = name[:name.IndexOf(",")]

			assemblyFile = FileSet("lib/**/$name.dll").Files.FirstOrDefault()
			if assemblyFile:
				assembly = Assembly.LoadFrom(Path.GetFullPath(assemblyFile))

			unless assembly:
				libRoot = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "../lib/"))
				assemblyFile = FileSet("$libRoot/**/$name.dll").Files.FirstOrDefault()
				if assemblyFile:
					assembly = Assembly.LoadFrom(Path.GetFullPath(assemblyFile))
		#print "resolved ${args.Name} to $assembly"
		return assembly

	static def CurrentDomain_AssemblyLoad(sender as object, args as AssemblyLoadEventArgs):
		assembly = args.LoadedAssembly
		#print "loaded ${assembly.GetName().Name}"
		assemblies.Add(assembly.GetName().Name, assembly)

AssemblyLocator.Init()

libs = List of string()
if Directory.Exists("lib"):
	libs.Add(Path.GetFullPath("lib"))
	for subDir in Directory.GetDirectories("lib"):
		libs.Add(Path.GetFullPath(subDir))

libRoot = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "../lib/"))
addDir as Action of string = null
addDir = def (dir as string):
	for dir in Directory.GetDirectories(dir):
		if Directory.GetFiles(dir).Length:
			libs.Add(dir)
		else:
			maxDir as string
			for d in Directory.GetDirectories(dir):
				name = Path.GetFileName(d)
				version = Version(name)
				if not maxDir:
					maxDir = name
				elif Version(maxDir) < version:
					maxDir = name
			continue unless maxDir
			libPath = Path.Combine(dir, maxDir)
			libs.Add(libPath)

addDir(libRoot)
Configuration.LibPaths = libs

Configuration.ScriptPaths.Add(AppDomain.CurrentDomain.BaseDirectory)

Configuration.AutoLoad.Add("Git.bake")
Configuration.AutoLoad.Add("Lib.bake")
Configuration.AutoLoad.Add("Tools.bake")
