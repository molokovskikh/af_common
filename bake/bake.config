import System
import System.IO
import System.Reflection
import System.Collections.Generic
import System.Linq.Enumerable
import System.Runtime.ExceptionServices
import Bake.IO.Extensions

class AssemblyLocator:

	static assemblies as Dictionary[of string, Assembly]

	public static DebugLoader as bool

	private static cache as string*
	private static cache2 as string*
	static compatibleClrs = {"net40": Version(4, 0),
			"net40-full": Version(4, 0),
			"net40clientprofile": Version(4, 0),
			"net40-client": Version(4, 0),
			"net-4.0": Version(4, 0),
			"net35": Version(3, 5),
			"net35-full": Version(3, 5),
			"net-3.5": Version(3, 5),
			"net20": Version(2, 0),
			"net-2.0": Version(2, 0),
			"20": Version(2, 0),
			"2": Version(2, 0),
			"2.0": Version(2, 0),
			"net": Version(2, 0),
			"lib": Version(2, 0)}

	static def Init():
		assemblies = Dictionary[of string, Assembly]()
		AppDomain.CurrentDomain.AssemblyLoad += CurrentDomain_AssemblyLoad
		AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve
		AppDomain.CurrentDomain.FirstChanceException += FirstChanceException

	static def FirstChanceException(sender as object, args as FirstChanceExceptionEventArgs):
		return unless DebugLoader
		print "first chance " + args.Exception
		if args.Exception isa  ReflectionTypeLoadException:
			r = cast(ReflectionTypeLoadException, args.Exception)
			for e in r.LoaderExceptions:
				print e

	static def CurrentDomain_AssemblyResolve(sender as object, args as ResolveEventArgs):
		try:
			if DebugLoader:
				print "try to resolve ${args.Name}"
			assembly as Assembly = null
			assemblies.TryGetValue(args.Name, assembly)
			#хак сборки boo встроены в bake по этому ресолвить их не надо
			if args.Name.Contains("Boo."):
				return null

			if  args.Name.Contains("Bake."):
				return Assembly.Load("bake")

			if not assembly:
				name = args.Name
				if name.Contains(","):
					name = name[:name.IndexOf(",")]

				assemblyFile = TryFindAssembly(name)
				if assemblyFile:
					assembly = Assembly.LoadFrom(Path.GetFullPath(assemblyFile))

			if DebugLoader:
				if assembly:
					assemblyFile = assembly.Location unless assemblyFile
				print "resolved ${args.Name} to $assembly $assemblyFile"
			return assembly
		except e:
			print e

	static def ParentDir(file as string):
		return Path.GetFileName(Path.GetDirectoryName(file)).ToLower()

	static def ParentDir(file as string, level as int):
		dir = Path.GetDirectoryName(file)
		for i in range(0, level):
			dir = Path.GetDirectoryName(dir)

	#в пакетах nuget могут лежать сборки для разных реализаций clr
	#для silverlight например
	#нужно загружать только совместимые
	static def FilterIncompatible(files as string*):
		return files.Where({f| compatibleClrs.ContainsKey(ParentDir(f))}).ToList()

	static def TryFindAssembly(name as string):
		unless cache:
			libRoot = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "packages"))
			globalLibs = FilterIncompatible(FileSet("$libRoot/**/*.dll"))
			localLibs = FileSet("lib/**/*.dll", Excludes: ["**/bin/**", "**/obj/**"]).Files
			packages = FilterIncompatible(FileSet("packages/**/*.dll"))
			cache2 = packages
			cache = packages.Concat(localLibs).Concat(globalLibs).ToArray()

		return FindInCache(name, cache2) or FindInCache(name, cache)

	static def FindInCache(name as string, cached as string*):
		versionToFile = cached.Where({f| String.Equals(Path.GetFileNameWithoutExtension(f), name, StringComparison.OrdinalIgnoreCase)}).Select({f| KeyValuePair[of Version, string](TryGetVersion(f), f)}).ToList()
		return null unless versionToFile.Count
		version = versionToFile.OrderByDescending({p| p.Key}).First()
		return version.Value

	static def TryGetVersion(file as string):
		posibleVersion = ParentDir(file)
		if compatibleClrs.ContainsKey(posibleVersion):
			return compatibleClrs[posibleVersion]
		return Version()

	static def CurrentDomain_AssemblyLoad(sender as object, args as AssemblyLoadEventArgs):
		try:
			assembly = args.LoadedAssembly
			if DebugLoader:
				name = assembly.GetName().Name
				unless assembly.IsDynamic:
					name += " " + assembly.Location
				print "loaded $name"
			unless assemblies.ContainsKey(assembly.GetName().Name):
				assemblies.Add(assembly.GetName().Name, assembly)
		except e:
			print e

AssemblyLocator.DebugLoader = Environment.CommandLine.Contains("debug-loader")
AssemblyLocator.Init()
Cfg.TaskLibs.Add(AppDomain.CurrentDomain.BaseDirectory)
